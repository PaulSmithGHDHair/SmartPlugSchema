// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smart_plug.proto

public final class SmartPlugOuterClass {
  private SmartPlugOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * If the schema is designed correctly to be future-proof then we should *NEVER*
   * need to change the schema version number; since we can just extend the
   * FieldKey key space with new scalar/complex types in the Field oneof as
   * needed. De-serialising systems just need to ignore fields with FieldKey
   * values that they do not know.
   * However, just in case we do need to redesign the initial parent message
   * format, we maintain a version number space:
   * </pre>
   *
   * Protobuf enum {@code SchemaVersion}
   */
  public enum SchemaVersion
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * never used since is default value (for not provided)
     * </pre>
     *
     * <code>INVALID = 0;</code>
     */
    INVALID(0),
    /**
     * <pre>
     * initial schema version number for device messages
     * </pre>
     *
     * <code>SMARTPLUG_V1 = 1;</code>
     */
    SMARTPLUG_V1(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * never used since is default value (for not provided)
     * </pre>
     *
     * <code>INVALID = 0;</code>
     */
    public static final int INVALID_VALUE = 0;
    /**
     * <pre>
     * initial schema version number for device messages
     * </pre>
     *
     * <code>SMARTPLUG_V1 = 1;</code>
     */
    public static final int SMARTPLUG_V1_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SchemaVersion valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SchemaVersion forNumber(int value) {
      switch (value) {
        case 0: return INVALID;
        case 1: return SMARTPLUG_V1;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SchemaVersion>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SchemaVersion> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SchemaVersion>() {
            public SchemaVersion findValueByNumber(int number) {
              return SchemaVersion.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return SmartPlugOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final SchemaVersion[] VALUES = values();

    public static SchemaVersion valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SchemaVersion(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SchemaVersion)
  }

  /**
   * <pre>
   * *CRITICAL*: The ordering and interpretation of individual key values in the
   * following FieldKey enum should *NEVER* change. If functionality is
   * deprecated the defined keys should not be reused. New functionality
   * (extensions) should append to the number space only:
   * </pre>
   *
   * Protobuf enum {@code FieldKey}
   */
  public enum FieldKey
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * normal enum default value
     * </pre>
     *
     * <code>UNUSED = 0;</code>
     */
    UNUSED(0),
    /**
     * <pre>
     * bytes  : human-readable NUL terminated diagnostic strs
     * </pre>
     *
     * <code>FW_INFORMATION = 1;</code>
     */
    FW_INFORMATION(1),
    /**
     * <pre>
     * Power
     * </pre>
     *
     * <code>POWER = 2;</code>
     */
    POWER(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * normal enum default value
     * </pre>
     *
     * <code>UNUSED = 0;</code>
     */
    public static final int UNUSED_VALUE = 0;
    /**
     * <pre>
     * bytes  : human-readable NUL terminated diagnostic strs
     * </pre>
     *
     * <code>FW_INFORMATION = 1;</code>
     */
    public static final int FW_INFORMATION_VALUE = 1;
    /**
     * <pre>
     * Power
     * </pre>
     *
     * <code>POWER = 2;</code>
     */
    public static final int POWER_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static FieldKey valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static FieldKey forNumber(int value) {
      switch (value) {
        case 0: return UNUSED;
        case 1: return FW_INFORMATION;
        case 2: return POWER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FieldKey>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        FieldKey> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FieldKey>() {
            public FieldKey findValueByNumber(int number) {
              return FieldKey.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return SmartPlugOuterClass.getDescriptor().getEnumTypes().get(1);
    }

    private static final FieldKey[] VALUES = values();

    public static FieldKey valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private FieldKey(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:FieldKey)
  }

  public interface PowerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Power)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * voltage measurment
     * </pre>
     *
     * <code>uint32 voltage = 1;</code>
     * @return The voltage.
     */
    int getVoltage();

    /**
     * <pre>
     * current measurment
     * </pre>
     *
     * <code>uint32 current = 2;</code>
     * @return The current.
     */
    int getCurrent();

    /**
     * <pre>
     * power measurment
     * </pre>
     *
     * <code>uint32 power = 3;</code>
     * @return The power.
     */
    int getPower();

    /**
     * <pre>
     * Timestamp seconds.
     * </pre>
     *
     * <code>uint64 timestamp = 4;</code>
     * @return The timestamp.
     */
    long getTimestamp();
  }
  /**
   * <pre>
   * The measured voltage, current and power delivered by the plug.
   * </pre>
   *
   * Protobuf type {@code Power}
   */
  public  static final class Power extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Power)
      PowerOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Power.newBuilder() to construct.
    private Power(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Power() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Power();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Power(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              voltage_ = input.readUInt32();
              break;
            }
            case 16: {

              current_ = input.readUInt32();
              break;
            }
            case 24: {

              power_ = input.readUInt32();
              break;
            }
            case 32: {

              timestamp_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SmartPlugOuterClass.internal_static_Power_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SmartPlugOuterClass.internal_static_Power_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SmartPlugOuterClass.Power.class, SmartPlugOuterClass.Power.Builder.class);
    }

    public static final int VOLTAGE_FIELD_NUMBER = 1;
    private int voltage_;
    /**
     * <pre>
     * voltage measurment
     * </pre>
     *
     * <code>uint32 voltage = 1;</code>
     * @return The voltage.
     */
    public int getVoltage() {
      return voltage_;
    }

    public static final int CURRENT_FIELD_NUMBER = 2;
    private int current_;
    /**
     * <pre>
     * current measurment
     * </pre>
     *
     * <code>uint32 current = 2;</code>
     * @return The current.
     */
    public int getCurrent() {
      return current_;
    }

    public static final int POWER_FIELD_NUMBER = 3;
    private int power_;
    /**
     * <pre>
     * power measurment
     * </pre>
     *
     * <code>uint32 power = 3;</code>
     * @return The power.
     */
    public int getPower() {
      return power_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 4;
    private long timestamp_;
    /**
     * <pre>
     * Timestamp seconds.
     * </pre>
     *
     * <code>uint64 timestamp = 4;</code>
     * @return The timestamp.
     */
    public long getTimestamp() {
      return timestamp_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (voltage_ != 0) {
        output.writeUInt32(1, voltage_);
      }
      if (current_ != 0) {
        output.writeUInt32(2, current_);
      }
      if (power_ != 0) {
        output.writeUInt32(3, power_);
      }
      if (timestamp_ != 0L) {
        output.writeUInt64(4, timestamp_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (voltage_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, voltage_);
      }
      if (current_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, current_);
      }
      if (power_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, power_);
      }
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, timestamp_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SmartPlugOuterClass.Power)) {
        return super.equals(obj);
      }
      SmartPlugOuterClass.Power other = (SmartPlugOuterClass.Power) obj;

      if (getVoltage()
          != other.getVoltage()) return false;
      if (getCurrent()
          != other.getCurrent()) return false;
      if (getPower()
          != other.getPower()) return false;
      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VOLTAGE_FIELD_NUMBER;
      hash = (53 * hash) + getVoltage();
      hash = (37 * hash) + CURRENT_FIELD_NUMBER;
      hash = (53 * hash) + getCurrent();
      hash = (37 * hash) + POWER_FIELD_NUMBER;
      hash = (53 * hash) + getPower();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SmartPlugOuterClass.Power parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SmartPlugOuterClass.Power parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SmartPlugOuterClass.Power parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SmartPlugOuterClass.Power parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SmartPlugOuterClass.Power parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SmartPlugOuterClass.Power parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SmartPlugOuterClass.Power parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SmartPlugOuterClass.Power parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SmartPlugOuterClass.Power parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SmartPlugOuterClass.Power parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SmartPlugOuterClass.Power parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SmartPlugOuterClass.Power parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SmartPlugOuterClass.Power prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The measured voltage, current and power delivered by the plug.
     * </pre>
     *
     * Protobuf type {@code Power}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Power)
        SmartPlugOuterClass.PowerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SmartPlugOuterClass.internal_static_Power_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SmartPlugOuterClass.internal_static_Power_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SmartPlugOuterClass.Power.class, SmartPlugOuterClass.Power.Builder.class);
      }

      // Construct using SmartPlugOuterClass.Power.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        voltage_ = 0;

        current_ = 0;

        power_ = 0;

        timestamp_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SmartPlugOuterClass.internal_static_Power_descriptor;
      }

      @java.lang.Override
      public SmartPlugOuterClass.Power getDefaultInstanceForType() {
        return SmartPlugOuterClass.Power.getDefaultInstance();
      }

      @java.lang.Override
      public SmartPlugOuterClass.Power build() {
        SmartPlugOuterClass.Power result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public SmartPlugOuterClass.Power buildPartial() {
        SmartPlugOuterClass.Power result = new SmartPlugOuterClass.Power(this);
        result.voltage_ = voltage_;
        result.current_ = current_;
        result.power_ = power_;
        result.timestamp_ = timestamp_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SmartPlugOuterClass.Power) {
          return mergeFrom((SmartPlugOuterClass.Power)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SmartPlugOuterClass.Power other) {
        if (other == SmartPlugOuterClass.Power.getDefaultInstance()) return this;
        if (other.getVoltage() != 0) {
          setVoltage(other.getVoltage());
        }
        if (other.getCurrent() != 0) {
          setCurrent(other.getCurrent());
        }
        if (other.getPower() != 0) {
          setPower(other.getPower());
        }
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SmartPlugOuterClass.Power parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SmartPlugOuterClass.Power) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int voltage_ ;
      /**
       * <pre>
       * voltage measurment
       * </pre>
       *
       * <code>uint32 voltage = 1;</code>
       * @return The voltage.
       */
      public int getVoltage() {
        return voltage_;
      }
      /**
       * <pre>
       * voltage measurment
       * </pre>
       *
       * <code>uint32 voltage = 1;</code>
       * @param value The voltage to set.
       * @return This builder for chaining.
       */
      public Builder setVoltage(int value) {
        
        voltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * voltage measurment
       * </pre>
       *
       * <code>uint32 voltage = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVoltage() {
        
        voltage_ = 0;
        onChanged();
        return this;
      }

      private int current_ ;
      /**
       * <pre>
       * current measurment
       * </pre>
       *
       * <code>uint32 current = 2;</code>
       * @return The current.
       */
      public int getCurrent() {
        return current_;
      }
      /**
       * <pre>
       * current measurment
       * </pre>
       *
       * <code>uint32 current = 2;</code>
       * @param value The current to set.
       * @return This builder for chaining.
       */
      public Builder setCurrent(int value) {
        
        current_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * current measurment
       * </pre>
       *
       * <code>uint32 current = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCurrent() {
        
        current_ = 0;
        onChanged();
        return this;
      }

      private int power_ ;
      /**
       * <pre>
       * power measurment
       * </pre>
       *
       * <code>uint32 power = 3;</code>
       * @return The power.
       */
      public int getPower() {
        return power_;
      }
      /**
       * <pre>
       * power measurment
       * </pre>
       *
       * <code>uint32 power = 3;</code>
       * @param value The power to set.
       * @return This builder for chaining.
       */
      public Builder setPower(int value) {
        
        power_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * power measurment
       * </pre>
       *
       * <code>uint32 power = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearPower() {
        
        power_ = 0;
        onChanged();
        return this;
      }

      private long timestamp_ ;
      /**
       * <pre>
       * Timestamp seconds.
       * </pre>
       *
       * <code>uint64 timestamp = 4;</code>
       * @return The timestamp.
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * Timestamp seconds.
       * </pre>
       *
       * <code>uint64 timestamp = 4;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Timestamp seconds.
       * </pre>
       *
       * <code>uint64 timestamp = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Power)
    }

    // @@protoc_insertion_point(class_scope:Power)
    private static final SmartPlugOuterClass.Power DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SmartPlugOuterClass.Power();
    }

    public static SmartPlugOuterClass.Power getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Power>
        PARSER = new com.google.protobuf.AbstractParser<Power>() {
      @java.lang.Override
      public Power parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Power(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Power> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Power> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public SmartPlugOuterClass.Power getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FieldOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Field)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The key defines which of the oneof "value" encodings is interpreted:
     * </pre>
     *
     * <code>.FieldKey key = 1;</code>
     * @return The enum numeric value on the wire for key.
     */
    int getKeyValue();
    /**
     * <pre>
     * The key defines which of the oneof "value" encodings is interpreted:
     * </pre>
     *
     * <code>.FieldKey key = 1;</code>
     * @return The key.
     */
    SmartPlugOuterClass.FieldKey getKey();

    /**
     * <pre>
     * scalar
     * </pre>
     *
     * <code>bool v_bool = 2;</code>
     * @return The vBool.
     */
    boolean getVBool();

    /**
     * <code>int32 v_int32 = 3;</code>
     * @return The vInt32.
     */
    int getVInt32();

    /**
     * <code>uint32 v_uint32 = 4;</code>
     * @return The vUint32.
     */
    int getVUint32();

    /**
     * <code>sint32 v_sint32 = 5;</code>
     * @return The vSint32.
     */
    int getVSint32();

    /**
     * <code>fixed32 v_fixed32 = 6;</code>
     * @return The vFixed32.
     */
    int getVFixed32();

    /**
     * <code>sfixed32 v_sfixed32 = 7;</code>
     * @return The vSfixed32.
     */
    int getVSfixed32();

    /**
     * <code>int64 v_int64 = 8;</code>
     * @return The vInt64.
     */
    long getVInt64();

    /**
     * <code>uint64 v_uint64 = 9;</code>
     * @return The vUint64.
     */
    long getVUint64();

    /**
     * <code>sint64 v_sint64 = 10;</code>
     * @return The vSint64.
     */
    long getVSint64();

    /**
     * <code>fixed64 v_fixed64 = 11;</code>
     * @return The vFixed64.
     */
    long getVFixed64();

    /**
     * <code>sfixed64 v_sfixed64 = 12;</code>
     * @return The vSfixed64.
     */
    long getVSfixed64();

    /**
     * <code>double v_double = 13;</code>
     * @return The vDouble.
     */
    double getVDouble();

    /**
     * <code>float v_float = 14;</code>
     * @return The vFloat.
     */
    float getVFloat();

    /**
     * <code>string v_string = 15;</code>
     * @return The vString.
     */
    java.lang.String getVString();
    /**
     * <code>string v_string = 15;</code>
     * @return The bytes for vString.
     */
    com.google.protobuf.ByteString
        getVStringBytes();

    /**
     * <code>bytes v_bytes = 16;</code>
     * @return The vBytes.
     */
    com.google.protobuf.ByteString getVBytes();

    /**
     * <pre>
     * complex
     * </pre>
     *
     * <code>.Power v_power = 17;</code>
     * @return Whether the vPower field is set.
     */
    boolean hasVPower();
    /**
     * <pre>
     * complex
     * </pre>
     *
     * <code>.Power v_power = 17;</code>
     * @return The vPower.
     */
    SmartPlugOuterClass.Power getVPower();
    /**
     * <pre>
     * complex
     * </pre>
     *
     * <code>.Power v_power = 17;</code>
     */
    SmartPlugOuterClass.PowerOrBuilder getVPowerOrBuilder();

    public SmartPlugOuterClass.Field.ValueCase getValueCase();
  }
  /**
   * <pre>
   * A basic field data item. NOTE: This approach avoids the issue of the message
   * generator not serializing values that match the default for the given
   * underlying scalar type; since we will never use the UNUSED enum key for real
   * fields:
   * </pre>
   *
   * Protobuf type {@code Field}
   */
  public  static final class Field extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Field)
      FieldOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Field.newBuilder() to construct.
    private Field(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Field() {
      key_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Field();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Field(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              key_ = rawValue;
              break;
            }
            case 16: {
              valueCase_ = 2;
              value_ = input.readBool();
              break;
            }
            case 24: {
              valueCase_ = 3;
              value_ = input.readInt32();
              break;
            }
            case 32: {
              valueCase_ = 4;
              value_ = input.readUInt32();
              break;
            }
            case 40: {
              valueCase_ = 5;
              value_ = input.readSInt32();
              break;
            }
            case 53: {
              valueCase_ = 6;
              value_ = input.readFixed32();
              break;
            }
            case 61: {
              valueCase_ = 7;
              value_ = input.readSFixed32();
              break;
            }
            case 64: {
              valueCase_ = 8;
              value_ = input.readInt64();
              break;
            }
            case 72: {
              valueCase_ = 9;
              value_ = input.readUInt64();
              break;
            }
            case 80: {
              valueCase_ = 10;
              value_ = input.readSInt64();
              break;
            }
            case 89: {
              valueCase_ = 11;
              value_ = input.readFixed64();
              break;
            }
            case 97: {
              valueCase_ = 12;
              value_ = input.readSFixed64();
              break;
            }
            case 105: {
              valueCase_ = 13;
              value_ = input.readDouble();
              break;
            }
            case 117: {
              valueCase_ = 14;
              value_ = input.readFloat();
              break;
            }
            case 122: {
              java.lang.String s = input.readStringRequireUtf8();
              valueCase_ = 15;
              value_ = s;
              break;
            }
            case 130: {
              valueCase_ = 16;
              value_ = input.readBytes();
              break;
            }
            case 138: {
              SmartPlugOuterClass.Power.Builder subBuilder = null;
              if (valueCase_ == 17) {
                subBuilder = ((SmartPlugOuterClass.Power) value_).toBuilder();
              }
              value_ =
                  input.readMessage(SmartPlugOuterClass.Power.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((SmartPlugOuterClass.Power) value_);
                value_ = subBuilder.buildPartial();
              }
              valueCase_ = 17;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SmartPlugOuterClass.internal_static_Field_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SmartPlugOuterClass.internal_static_Field_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SmartPlugOuterClass.Field.class, SmartPlugOuterClass.Field.Builder.class);
    }

    private int valueCase_ = 0;
    private java.lang.Object value_;
    public enum ValueCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      V_BOOL(2),
      V_INT32(3),
      V_UINT32(4),
      V_SINT32(5),
      V_FIXED32(6),
      V_SFIXED32(7),
      V_INT64(8),
      V_UINT64(9),
      V_SINT64(10),
      V_FIXED64(11),
      V_SFIXED64(12),
      V_DOUBLE(13),
      V_FLOAT(14),
      V_STRING(15),
      V_BYTES(16),
      V_POWER(17),
      VALUE_NOT_SET(0);
      private final int value;
      private ValueCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValueCase forNumber(int value) {
        switch (value) {
          case 2: return V_BOOL;
          case 3: return V_INT32;
          case 4: return V_UINT32;
          case 5: return V_SINT32;
          case 6: return V_FIXED32;
          case 7: return V_SFIXED32;
          case 8: return V_INT64;
          case 9: return V_UINT64;
          case 10: return V_SINT64;
          case 11: return V_FIXED64;
          case 12: return V_SFIXED64;
          case 13: return V_DOUBLE;
          case 14: return V_FLOAT;
          case 15: return V_STRING;
          case 16: return V_BYTES;
          case 17: return V_POWER;
          case 0: return VALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ValueCase
    getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private int key_;
    /**
     * <pre>
     * The key defines which of the oneof "value" encodings is interpreted:
     * </pre>
     *
     * <code>.FieldKey key = 1;</code>
     * @return The enum numeric value on the wire for key.
     */
    public int getKeyValue() {
      return key_;
    }
    /**
     * <pre>
     * The key defines which of the oneof "value" encodings is interpreted:
     * </pre>
     *
     * <code>.FieldKey key = 1;</code>
     * @return The key.
     */
    public SmartPlugOuterClass.FieldKey getKey() {
      @SuppressWarnings("deprecation")
      SmartPlugOuterClass.FieldKey result = SmartPlugOuterClass.FieldKey.valueOf(key_);
      return result == null ? SmartPlugOuterClass.FieldKey.UNRECOGNIZED : result;
    }

    public static final int V_BOOL_FIELD_NUMBER = 2;
    /**
     * <pre>
     * scalar
     * </pre>
     *
     * <code>bool v_bool = 2;</code>
     * @return The vBool.
     */
    public boolean getVBool() {
      if (valueCase_ == 2) {
        return (java.lang.Boolean) value_;
      }
      return false;
    }

    public static final int V_INT32_FIELD_NUMBER = 3;
    /**
     * <code>int32 v_int32 = 3;</code>
     * @return The vInt32.
     */
    public int getVInt32() {
      if (valueCase_ == 3) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int V_UINT32_FIELD_NUMBER = 4;
    /**
     * <code>uint32 v_uint32 = 4;</code>
     * @return The vUint32.
     */
    public int getVUint32() {
      if (valueCase_ == 4) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int V_SINT32_FIELD_NUMBER = 5;
    /**
     * <code>sint32 v_sint32 = 5;</code>
     * @return The vSint32.
     */
    public int getVSint32() {
      if (valueCase_ == 5) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int V_FIXED32_FIELD_NUMBER = 6;
    /**
     * <code>fixed32 v_fixed32 = 6;</code>
     * @return The vFixed32.
     */
    public int getVFixed32() {
      if (valueCase_ == 6) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int V_SFIXED32_FIELD_NUMBER = 7;
    /**
     * <code>sfixed32 v_sfixed32 = 7;</code>
     * @return The vSfixed32.
     */
    public int getVSfixed32() {
      if (valueCase_ == 7) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int V_INT64_FIELD_NUMBER = 8;
    /**
     * <code>int64 v_int64 = 8;</code>
     * @return The vInt64.
     */
    public long getVInt64() {
      if (valueCase_ == 8) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    public static final int V_UINT64_FIELD_NUMBER = 9;
    /**
     * <code>uint64 v_uint64 = 9;</code>
     * @return The vUint64.
     */
    public long getVUint64() {
      if (valueCase_ == 9) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    public static final int V_SINT64_FIELD_NUMBER = 10;
    /**
     * <code>sint64 v_sint64 = 10;</code>
     * @return The vSint64.
     */
    public long getVSint64() {
      if (valueCase_ == 10) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    public static final int V_FIXED64_FIELD_NUMBER = 11;
    /**
     * <code>fixed64 v_fixed64 = 11;</code>
     * @return The vFixed64.
     */
    public long getVFixed64() {
      if (valueCase_ == 11) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    public static final int V_SFIXED64_FIELD_NUMBER = 12;
    /**
     * <code>sfixed64 v_sfixed64 = 12;</code>
     * @return The vSfixed64.
     */
    public long getVSfixed64() {
      if (valueCase_ == 12) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    public static final int V_DOUBLE_FIELD_NUMBER = 13;
    /**
     * <code>double v_double = 13;</code>
     * @return The vDouble.
     */
    public double getVDouble() {
      if (valueCase_ == 13) {
        return (java.lang.Double) value_;
      }
      return 0D;
    }

    public static final int V_FLOAT_FIELD_NUMBER = 14;
    /**
     * <code>float v_float = 14;</code>
     * @return The vFloat.
     */
    public float getVFloat() {
      if (valueCase_ == 14) {
        return (java.lang.Float) value_;
      }
      return 0F;
    }

    public static final int V_STRING_FIELD_NUMBER = 15;
    /**
     * <code>string v_string = 15;</code>
     * @return The vString.
     */
    public java.lang.String getVString() {
      java.lang.Object ref = "";
      if (valueCase_ == 15) {
        ref = value_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (valueCase_ == 15) {
          value_ = s;
        }
        return s;
      }
    }
    /**
     * <code>string v_string = 15;</code>
     * @return The bytes for vString.
     */
    public com.google.protobuf.ByteString
        getVStringBytes() {
      java.lang.Object ref = "";
      if (valueCase_ == 15) {
        ref = value_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (valueCase_ == 15) {
          value_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int V_BYTES_FIELD_NUMBER = 16;
    /**
     * <code>bytes v_bytes = 16;</code>
     * @return The vBytes.
     */
    public com.google.protobuf.ByteString getVBytes() {
      if (valueCase_ == 16) {
        return (com.google.protobuf.ByteString) value_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }

    public static final int V_POWER_FIELD_NUMBER = 17;
    /**
     * <pre>
     * complex
     * </pre>
     *
     * <code>.Power v_power = 17;</code>
     * @return Whether the vPower field is set.
     */
    public boolean hasVPower() {
      return valueCase_ == 17;
    }
    /**
     * <pre>
     * complex
     * </pre>
     *
     * <code>.Power v_power = 17;</code>
     * @return The vPower.
     */
    public SmartPlugOuterClass.Power getVPower() {
      if (valueCase_ == 17) {
         return (SmartPlugOuterClass.Power) value_;
      }
      return SmartPlugOuterClass.Power.getDefaultInstance();
    }
    /**
     * <pre>
     * complex
     * </pre>
     *
     * <code>.Power v_power = 17;</code>
     */
    public SmartPlugOuterClass.PowerOrBuilder getVPowerOrBuilder() {
      if (valueCase_ == 17) {
         return (SmartPlugOuterClass.Power) value_;
      }
      return SmartPlugOuterClass.Power.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (key_ != SmartPlugOuterClass.FieldKey.UNUSED.getNumber()) {
        output.writeEnum(1, key_);
      }
      if (valueCase_ == 2) {
        output.writeBool(
            2, (boolean)((java.lang.Boolean) value_));
      }
      if (valueCase_ == 3) {
        output.writeInt32(
            3, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 4) {
        output.writeUInt32(
            4, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 5) {
        output.writeSInt32(
            5, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 6) {
        output.writeFixed32(
            6, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 7) {
        output.writeSFixed32(
            7, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 8) {
        output.writeInt64(
            8, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 9) {
        output.writeUInt64(
            9, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 10) {
        output.writeSInt64(
            10, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 11) {
        output.writeFixed64(
            11, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 12) {
        output.writeSFixed64(
            12, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 13) {
        output.writeDouble(
            13, (double)((java.lang.Double) value_));
      }
      if (valueCase_ == 14) {
        output.writeFloat(
            14, (float)((java.lang.Float) value_));
      }
      if (valueCase_ == 15) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 15, value_);
      }
      if (valueCase_ == 16) {
        output.writeBytes(
            16, (com.google.protobuf.ByteString) value_);
      }
      if (valueCase_ == 17) {
        output.writeMessage(17, (SmartPlugOuterClass.Power) value_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (key_ != SmartPlugOuterClass.FieldKey.UNUSED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, key_);
      }
      if (valueCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              2, (boolean)((java.lang.Boolean) value_));
      }
      if (valueCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              3, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(
              4, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(
              5, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(
              6, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(
              7, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              8, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 9) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(
              9, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 10) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(
              10, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 11) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(
              11, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 12) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed64Size(
              12, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 13) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(
              13, (double)((java.lang.Double) value_));
      }
      if (valueCase_ == 14) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(
              14, (float)((java.lang.Float) value_));
      }
      if (valueCase_ == 15) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(15, value_);
      }
      if (valueCase_ == 16) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              16, (com.google.protobuf.ByteString) value_);
      }
      if (valueCase_ == 17) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, (SmartPlugOuterClass.Power) value_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SmartPlugOuterClass.Field)) {
        return super.equals(obj);
      }
      SmartPlugOuterClass.Field other = (SmartPlugOuterClass.Field) obj;

      if (key_ != other.key_) return false;
      if (!getValueCase().equals(other.getValueCase())) return false;
      switch (valueCase_) {
        case 2:
          if (getVBool()
              != other.getVBool()) return false;
          break;
        case 3:
          if (getVInt32()
              != other.getVInt32()) return false;
          break;
        case 4:
          if (getVUint32()
              != other.getVUint32()) return false;
          break;
        case 5:
          if (getVSint32()
              != other.getVSint32()) return false;
          break;
        case 6:
          if (getVFixed32()
              != other.getVFixed32()) return false;
          break;
        case 7:
          if (getVSfixed32()
              != other.getVSfixed32()) return false;
          break;
        case 8:
          if (getVInt64()
              != other.getVInt64()) return false;
          break;
        case 9:
          if (getVUint64()
              != other.getVUint64()) return false;
          break;
        case 10:
          if (getVSint64()
              != other.getVSint64()) return false;
          break;
        case 11:
          if (getVFixed64()
              != other.getVFixed64()) return false;
          break;
        case 12:
          if (getVSfixed64()
              != other.getVSfixed64()) return false;
          break;
        case 13:
          if (java.lang.Double.doubleToLongBits(getVDouble())
              != java.lang.Double.doubleToLongBits(
                  other.getVDouble())) return false;
          break;
        case 14:
          if (java.lang.Float.floatToIntBits(getVFloat())
              != java.lang.Float.floatToIntBits(
                  other.getVFloat())) return false;
          break;
        case 15:
          if (!getVString()
              .equals(other.getVString())) return false;
          break;
        case 16:
          if (!getVBytes()
              .equals(other.getVBytes())) return false;
          break;
        case 17:
          if (!getVPower()
              .equals(other.getVPower())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + key_;
      switch (valueCase_) {
        case 2:
          hash = (37 * hash) + V_BOOL_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getVBool());
          break;
        case 3:
          hash = (37 * hash) + V_INT32_FIELD_NUMBER;
          hash = (53 * hash) + getVInt32();
          break;
        case 4:
          hash = (37 * hash) + V_UINT32_FIELD_NUMBER;
          hash = (53 * hash) + getVUint32();
          break;
        case 5:
          hash = (37 * hash) + V_SINT32_FIELD_NUMBER;
          hash = (53 * hash) + getVSint32();
          break;
        case 6:
          hash = (37 * hash) + V_FIXED32_FIELD_NUMBER;
          hash = (53 * hash) + getVFixed32();
          break;
        case 7:
          hash = (37 * hash) + V_SFIXED32_FIELD_NUMBER;
          hash = (53 * hash) + getVSfixed32();
          break;
        case 8:
          hash = (37 * hash) + V_INT64_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getVInt64());
          break;
        case 9:
          hash = (37 * hash) + V_UINT64_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getVUint64());
          break;
        case 10:
          hash = (37 * hash) + V_SINT64_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getVSint64());
          break;
        case 11:
          hash = (37 * hash) + V_FIXED64_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getVFixed64());
          break;
        case 12:
          hash = (37 * hash) + V_SFIXED64_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getVSfixed64());
          break;
        case 13:
          hash = (37 * hash) + V_DOUBLE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getVDouble()));
          break;
        case 14:
          hash = (37 * hash) + V_FLOAT_FIELD_NUMBER;
          hash = (53 * hash) + java.lang.Float.floatToIntBits(
              getVFloat());
          break;
        case 15:
          hash = (37 * hash) + V_STRING_FIELD_NUMBER;
          hash = (53 * hash) + getVString().hashCode();
          break;
        case 16:
          hash = (37 * hash) + V_BYTES_FIELD_NUMBER;
          hash = (53 * hash) + getVBytes().hashCode();
          break;
        case 17:
          hash = (37 * hash) + V_POWER_FIELD_NUMBER;
          hash = (53 * hash) + getVPower().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SmartPlugOuterClass.Field parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SmartPlugOuterClass.Field parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SmartPlugOuterClass.Field parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SmartPlugOuterClass.Field parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SmartPlugOuterClass.Field parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SmartPlugOuterClass.Field parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SmartPlugOuterClass.Field parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SmartPlugOuterClass.Field parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SmartPlugOuterClass.Field parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SmartPlugOuterClass.Field parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SmartPlugOuterClass.Field parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SmartPlugOuterClass.Field parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SmartPlugOuterClass.Field prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A basic field data item. NOTE: This approach avoids the issue of the message
     * generator not serializing values that match the default for the given
     * underlying scalar type; since we will never use the UNUSED enum key for real
     * fields:
     * </pre>
     *
     * Protobuf type {@code Field}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Field)
        SmartPlugOuterClass.FieldOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SmartPlugOuterClass.internal_static_Field_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SmartPlugOuterClass.internal_static_Field_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SmartPlugOuterClass.Field.class, SmartPlugOuterClass.Field.Builder.class);
      }

      // Construct using SmartPlugOuterClass.Field.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        key_ = 0;

        valueCase_ = 0;
        value_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SmartPlugOuterClass.internal_static_Field_descriptor;
      }

      @java.lang.Override
      public SmartPlugOuterClass.Field getDefaultInstanceForType() {
        return SmartPlugOuterClass.Field.getDefaultInstance();
      }

      @java.lang.Override
      public SmartPlugOuterClass.Field build() {
        SmartPlugOuterClass.Field result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public SmartPlugOuterClass.Field buildPartial() {
        SmartPlugOuterClass.Field result = new SmartPlugOuterClass.Field(this);
        result.key_ = key_;
        if (valueCase_ == 2) {
          result.value_ = value_;
        }
        if (valueCase_ == 3) {
          result.value_ = value_;
        }
        if (valueCase_ == 4) {
          result.value_ = value_;
        }
        if (valueCase_ == 5) {
          result.value_ = value_;
        }
        if (valueCase_ == 6) {
          result.value_ = value_;
        }
        if (valueCase_ == 7) {
          result.value_ = value_;
        }
        if (valueCase_ == 8) {
          result.value_ = value_;
        }
        if (valueCase_ == 9) {
          result.value_ = value_;
        }
        if (valueCase_ == 10) {
          result.value_ = value_;
        }
        if (valueCase_ == 11) {
          result.value_ = value_;
        }
        if (valueCase_ == 12) {
          result.value_ = value_;
        }
        if (valueCase_ == 13) {
          result.value_ = value_;
        }
        if (valueCase_ == 14) {
          result.value_ = value_;
        }
        if (valueCase_ == 15) {
          result.value_ = value_;
        }
        if (valueCase_ == 16) {
          result.value_ = value_;
        }
        if (valueCase_ == 17) {
          if (vPowerBuilder_ == null) {
            result.value_ = value_;
          } else {
            result.value_ = vPowerBuilder_.build();
          }
        }
        result.valueCase_ = valueCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SmartPlugOuterClass.Field) {
          return mergeFrom((SmartPlugOuterClass.Field)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SmartPlugOuterClass.Field other) {
        if (other == SmartPlugOuterClass.Field.getDefaultInstance()) return this;
        if (other.key_ != 0) {
          setKeyValue(other.getKeyValue());
        }
        switch (other.getValueCase()) {
          case V_BOOL: {
            setVBool(other.getVBool());
            break;
          }
          case V_INT32: {
            setVInt32(other.getVInt32());
            break;
          }
          case V_UINT32: {
            setVUint32(other.getVUint32());
            break;
          }
          case V_SINT32: {
            setVSint32(other.getVSint32());
            break;
          }
          case V_FIXED32: {
            setVFixed32(other.getVFixed32());
            break;
          }
          case V_SFIXED32: {
            setVSfixed32(other.getVSfixed32());
            break;
          }
          case V_INT64: {
            setVInt64(other.getVInt64());
            break;
          }
          case V_UINT64: {
            setVUint64(other.getVUint64());
            break;
          }
          case V_SINT64: {
            setVSint64(other.getVSint64());
            break;
          }
          case V_FIXED64: {
            setVFixed64(other.getVFixed64());
            break;
          }
          case V_SFIXED64: {
            setVSfixed64(other.getVSfixed64());
            break;
          }
          case V_DOUBLE: {
            setVDouble(other.getVDouble());
            break;
          }
          case V_FLOAT: {
            setVFloat(other.getVFloat());
            break;
          }
          case V_STRING: {
            valueCase_ = 15;
            value_ = other.value_;
            onChanged();
            break;
          }
          case V_BYTES: {
            setVBytes(other.getVBytes());
            break;
          }
          case V_POWER: {
            mergeVPower(other.getVPower());
            break;
          }
          case VALUE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SmartPlugOuterClass.Field parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SmartPlugOuterClass.Field) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int valueCase_ = 0;
      private java.lang.Object value_;
      public ValueCase
          getValueCase() {
        return ValueCase.forNumber(
            valueCase_);
      }

      public Builder clearValue() {
        valueCase_ = 0;
        value_ = null;
        onChanged();
        return this;
      }


      private int key_ = 0;
      /**
       * <pre>
       * The key defines which of the oneof "value" encodings is interpreted:
       * </pre>
       *
       * <code>.FieldKey key = 1;</code>
       * @return The enum numeric value on the wire for key.
       */
      public int getKeyValue() {
        return key_;
      }
      /**
       * <pre>
       * The key defines which of the oneof "value" encodings is interpreted:
       * </pre>
       *
       * <code>.FieldKey key = 1;</code>
       * @param value The enum numeric value on the wire for key to set.
       * @return This builder for chaining.
       */
      public Builder setKeyValue(int value) {
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The key defines which of the oneof "value" encodings is interpreted:
       * </pre>
       *
       * <code>.FieldKey key = 1;</code>
       * @return The key.
       */
      public SmartPlugOuterClass.FieldKey getKey() {
        @SuppressWarnings("deprecation")
        SmartPlugOuterClass.FieldKey result = SmartPlugOuterClass.FieldKey.valueOf(key_);
        return result == null ? SmartPlugOuterClass.FieldKey.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The key defines which of the oneof "value" encodings is interpreted:
       * </pre>
       *
       * <code>.FieldKey key = 1;</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(SmartPlugOuterClass.FieldKey value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        key_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The key defines which of the oneof "value" encodings is interpreted:
       * </pre>
       *
       * <code>.FieldKey key = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        
        key_ = 0;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * scalar
       * </pre>
       *
       * <code>bool v_bool = 2;</code>
       * @return The vBool.
       */
      public boolean getVBool() {
        if (valueCase_ == 2) {
          return (java.lang.Boolean) value_;
        }
        return false;
      }
      /**
       * <pre>
       * scalar
       * </pre>
       *
       * <code>bool v_bool = 2;</code>
       * @param value The vBool to set.
       * @return This builder for chaining.
       */
      public Builder setVBool(boolean value) {
        valueCase_ = 2;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * scalar
       * </pre>
       *
       * <code>bool v_bool = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearVBool() {
        if (valueCase_ == 2) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>int32 v_int32 = 3;</code>
       * @return The vInt32.
       */
      public int getVInt32() {
        if (valueCase_ == 3) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>int32 v_int32 = 3;</code>
       * @param value The vInt32 to set.
       * @return This builder for chaining.
       */
      public Builder setVInt32(int value) {
        valueCase_ = 3;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 v_int32 = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearVInt32() {
        if (valueCase_ == 3) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>uint32 v_uint32 = 4;</code>
       * @return The vUint32.
       */
      public int getVUint32() {
        if (valueCase_ == 4) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>uint32 v_uint32 = 4;</code>
       * @param value The vUint32 to set.
       * @return This builder for chaining.
       */
      public Builder setVUint32(int value) {
        valueCase_ = 4;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 v_uint32 = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearVUint32() {
        if (valueCase_ == 4) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>sint32 v_sint32 = 5;</code>
       * @return The vSint32.
       */
      public int getVSint32() {
        if (valueCase_ == 5) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>sint32 v_sint32 = 5;</code>
       * @param value The vSint32 to set.
       * @return This builder for chaining.
       */
      public Builder setVSint32(int value) {
        valueCase_ = 5;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sint32 v_sint32 = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearVSint32() {
        if (valueCase_ == 5) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>fixed32 v_fixed32 = 6;</code>
       * @return The vFixed32.
       */
      public int getVFixed32() {
        if (valueCase_ == 6) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>fixed32 v_fixed32 = 6;</code>
       * @param value The vFixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setVFixed32(int value) {
        valueCase_ = 6;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>fixed32 v_fixed32 = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearVFixed32() {
        if (valueCase_ == 6) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>sfixed32 v_sfixed32 = 7;</code>
       * @return The vSfixed32.
       */
      public int getVSfixed32() {
        if (valueCase_ == 7) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>sfixed32 v_sfixed32 = 7;</code>
       * @param value The vSfixed32 to set.
       * @return This builder for chaining.
       */
      public Builder setVSfixed32(int value) {
        valueCase_ = 7;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sfixed32 v_sfixed32 = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearVSfixed32() {
        if (valueCase_ == 7) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>int64 v_int64 = 8;</code>
       * @return The vInt64.
       */
      public long getVInt64() {
        if (valueCase_ == 8) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>int64 v_int64 = 8;</code>
       * @param value The vInt64 to set.
       * @return This builder for chaining.
       */
      public Builder setVInt64(long value) {
        valueCase_ = 8;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 v_int64 = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearVInt64() {
        if (valueCase_ == 8) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>uint64 v_uint64 = 9;</code>
       * @return The vUint64.
       */
      public long getVUint64() {
        if (valueCase_ == 9) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>uint64 v_uint64 = 9;</code>
       * @param value The vUint64 to set.
       * @return This builder for chaining.
       */
      public Builder setVUint64(long value) {
        valueCase_ = 9;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 v_uint64 = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearVUint64() {
        if (valueCase_ == 9) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>sint64 v_sint64 = 10;</code>
       * @return The vSint64.
       */
      public long getVSint64() {
        if (valueCase_ == 10) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>sint64 v_sint64 = 10;</code>
       * @param value The vSint64 to set.
       * @return This builder for chaining.
       */
      public Builder setVSint64(long value) {
        valueCase_ = 10;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sint64 v_sint64 = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearVSint64() {
        if (valueCase_ == 10) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>fixed64 v_fixed64 = 11;</code>
       * @return The vFixed64.
       */
      public long getVFixed64() {
        if (valueCase_ == 11) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>fixed64 v_fixed64 = 11;</code>
       * @param value The vFixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setVFixed64(long value) {
        valueCase_ = 11;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>fixed64 v_fixed64 = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearVFixed64() {
        if (valueCase_ == 11) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>sfixed64 v_sfixed64 = 12;</code>
       * @return The vSfixed64.
       */
      public long getVSfixed64() {
        if (valueCase_ == 12) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>sfixed64 v_sfixed64 = 12;</code>
       * @param value The vSfixed64 to set.
       * @return This builder for chaining.
       */
      public Builder setVSfixed64(long value) {
        valueCase_ = 12;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sfixed64 v_sfixed64 = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearVSfixed64() {
        if (valueCase_ == 12) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>double v_double = 13;</code>
       * @return The vDouble.
       */
      public double getVDouble() {
        if (valueCase_ == 13) {
          return (java.lang.Double) value_;
        }
        return 0D;
      }
      /**
       * <code>double v_double = 13;</code>
       * @param value The vDouble to set.
       * @return This builder for chaining.
       */
      public Builder setVDouble(double value) {
        valueCase_ = 13;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double v_double = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearVDouble() {
        if (valueCase_ == 13) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>float v_float = 14;</code>
       * @return The vFloat.
       */
      public float getVFloat() {
        if (valueCase_ == 14) {
          return (java.lang.Float) value_;
        }
        return 0F;
      }
      /**
       * <code>float v_float = 14;</code>
       * @param value The vFloat to set.
       * @return This builder for chaining.
       */
      public Builder setVFloat(float value) {
        valueCase_ = 14;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float v_float = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearVFloat() {
        if (valueCase_ == 14) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>string v_string = 15;</code>
       * @return The vString.
       */
      public java.lang.String getVString() {
        java.lang.Object ref = "";
        if (valueCase_ == 15) {
          ref = value_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (valueCase_ == 15) {
            value_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string v_string = 15;</code>
       * @return The bytes for vString.
       */
      public com.google.protobuf.ByteString
          getVStringBytes() {
        java.lang.Object ref = "";
        if (valueCase_ == 15) {
          ref = value_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (valueCase_ == 15) {
            value_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string v_string = 15;</code>
       * @param value The vString to set.
       * @return This builder for chaining.
       */
      public Builder setVString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  valueCase_ = 15;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string v_string = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearVString() {
        if (valueCase_ == 15) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <code>string v_string = 15;</code>
       * @param value The bytes for vString to set.
       * @return This builder for chaining.
       */
      public Builder setVStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        valueCase_ = 15;
        value_ = value;
        onChanged();
        return this;
      }

      /**
       * <code>bytes v_bytes = 16;</code>
       * @return The vBytes.
       */
      public com.google.protobuf.ByteString getVBytes() {
        if (valueCase_ == 16) {
          return (com.google.protobuf.ByteString) value_;
        }
        return com.google.protobuf.ByteString.EMPTY;
      }
      /**
       * <code>bytes v_bytes = 16;</code>
       * @param value The vBytes to set.
       * @return This builder for chaining.
       */
      public Builder setVBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  valueCase_ = 16;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes v_bytes = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearVBytes() {
        if (valueCase_ == 16) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          SmartPlugOuterClass.Power, SmartPlugOuterClass.Power.Builder, SmartPlugOuterClass.PowerOrBuilder> vPowerBuilder_;
      /**
       * <pre>
       * complex
       * </pre>
       *
       * <code>.Power v_power = 17;</code>
       * @return Whether the vPower field is set.
       */
      public boolean hasVPower() {
        return valueCase_ == 17;
      }
      /**
       * <pre>
       * complex
       * </pre>
       *
       * <code>.Power v_power = 17;</code>
       * @return The vPower.
       */
      public SmartPlugOuterClass.Power getVPower() {
        if (vPowerBuilder_ == null) {
          if (valueCase_ == 17) {
            return (SmartPlugOuterClass.Power) value_;
          }
          return SmartPlugOuterClass.Power.getDefaultInstance();
        } else {
          if (valueCase_ == 17) {
            return vPowerBuilder_.getMessage();
          }
          return SmartPlugOuterClass.Power.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * complex
       * </pre>
       *
       * <code>.Power v_power = 17;</code>
       */
      public Builder setVPower(SmartPlugOuterClass.Power value) {
        if (vPowerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
          onChanged();
        } else {
          vPowerBuilder_.setMessage(value);
        }
        valueCase_ = 17;
        return this;
      }
      /**
       * <pre>
       * complex
       * </pre>
       *
       * <code>.Power v_power = 17;</code>
       */
      public Builder setVPower(
          SmartPlugOuterClass.Power.Builder builderForValue) {
        if (vPowerBuilder_ == null) {
          value_ = builderForValue.build();
          onChanged();
        } else {
          vPowerBuilder_.setMessage(builderForValue.build());
        }
        valueCase_ = 17;
        return this;
      }
      /**
       * <pre>
       * complex
       * </pre>
       *
       * <code>.Power v_power = 17;</code>
       */
      public Builder mergeVPower(SmartPlugOuterClass.Power value) {
        if (vPowerBuilder_ == null) {
          if (valueCase_ == 17 &&
              value_ != SmartPlugOuterClass.Power.getDefaultInstance()) {
            value_ = SmartPlugOuterClass.Power.newBuilder((SmartPlugOuterClass.Power) value_)
                .mergeFrom(value).buildPartial();
          } else {
            value_ = value;
          }
          onChanged();
        } else {
          if (valueCase_ == 17) {
            vPowerBuilder_.mergeFrom(value);
          }
          vPowerBuilder_.setMessage(value);
        }
        valueCase_ = 17;
        return this;
      }
      /**
       * <pre>
       * complex
       * </pre>
       *
       * <code>.Power v_power = 17;</code>
       */
      public Builder clearVPower() {
        if (vPowerBuilder_ == null) {
          if (valueCase_ == 17) {
            valueCase_ = 0;
            value_ = null;
            onChanged();
          }
        } else {
          if (valueCase_ == 17) {
            valueCase_ = 0;
            value_ = null;
          }
          vPowerBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * complex
       * </pre>
       *
       * <code>.Power v_power = 17;</code>
       */
      public SmartPlugOuterClass.Power.Builder getVPowerBuilder() {
        return getVPowerFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * complex
       * </pre>
       *
       * <code>.Power v_power = 17;</code>
       */
      public SmartPlugOuterClass.PowerOrBuilder getVPowerOrBuilder() {
        if ((valueCase_ == 17) && (vPowerBuilder_ != null)) {
          return vPowerBuilder_.getMessageOrBuilder();
        } else {
          if (valueCase_ == 17) {
            return (SmartPlugOuterClass.Power) value_;
          }
          return SmartPlugOuterClass.Power.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * complex
       * </pre>
       *
       * <code>.Power v_power = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SmartPlugOuterClass.Power, SmartPlugOuterClass.Power.Builder, SmartPlugOuterClass.PowerOrBuilder> 
          getVPowerFieldBuilder() {
        if (vPowerBuilder_ == null) {
          if (!(valueCase_ == 17)) {
            value_ = SmartPlugOuterClass.Power.getDefaultInstance();
          }
          vPowerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SmartPlugOuterClass.Power, SmartPlugOuterClass.Power.Builder, SmartPlugOuterClass.PowerOrBuilder>(
                  (SmartPlugOuterClass.Power) value_,
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        valueCase_ = 17;
        onChanged();;
        return vPowerBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Field)
    }

    // @@protoc_insertion_point(class_scope:Field)
    private static final SmartPlugOuterClass.Field DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SmartPlugOuterClass.Field();
    }

    public static SmartPlugOuterClass.Field getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Field>
        PARSER = new com.google.protobuf.AbstractParser<Field>() {
      @java.lang.Override
      public Field parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Field(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Field> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Field> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public SmartPlugOuterClass.Field getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UUIDOrBuilder extends
      // @@protoc_insertion_point(interface_extends:UUID)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string devId = 1;</code>
     * @return The devId.
     */
    java.lang.String getDevId();
    /**
     * <code>string devId = 1;</code>
     * @return The bytes for devId.
     */
    com.google.protobuf.ByteString
        getDevIdBytes();
  }
  /**
   * Protobuf type {@code UUID}
   */
  public  static final class UUID extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:UUID)
      UUIDOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UUID.newBuilder() to construct.
    private UUID(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UUID() {
      devId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UUID();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UUID(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              devId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SmartPlugOuterClass.internal_static_UUID_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SmartPlugOuterClass.internal_static_UUID_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SmartPlugOuterClass.UUID.class, SmartPlugOuterClass.UUID.Builder.class);
    }

    public static final int DEVID_FIELD_NUMBER = 1;
    private volatile java.lang.Object devId_;
    /**
     * <code>string devId = 1;</code>
     * @return The devId.
     */
    public java.lang.String getDevId() {
      java.lang.Object ref = devId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        devId_ = s;
        return s;
      }
    }
    /**
     * <code>string devId = 1;</code>
     * @return The bytes for devId.
     */
    public com.google.protobuf.ByteString
        getDevIdBytes() {
      java.lang.Object ref = devId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        devId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getDevIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, devId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getDevIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, devId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SmartPlugOuterClass.UUID)) {
        return super.equals(obj);
      }
      SmartPlugOuterClass.UUID other = (SmartPlugOuterClass.UUID) obj;

      if (!getDevId()
          .equals(other.getDevId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DEVID_FIELD_NUMBER;
      hash = (53 * hash) + getDevId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SmartPlugOuterClass.UUID parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SmartPlugOuterClass.UUID parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SmartPlugOuterClass.UUID parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SmartPlugOuterClass.UUID parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SmartPlugOuterClass.UUID parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SmartPlugOuterClass.UUID parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SmartPlugOuterClass.UUID parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SmartPlugOuterClass.UUID parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SmartPlugOuterClass.UUID parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SmartPlugOuterClass.UUID parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SmartPlugOuterClass.UUID parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SmartPlugOuterClass.UUID parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SmartPlugOuterClass.UUID prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code UUID}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:UUID)
        SmartPlugOuterClass.UUIDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SmartPlugOuterClass.internal_static_UUID_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SmartPlugOuterClass.internal_static_UUID_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SmartPlugOuterClass.UUID.class, SmartPlugOuterClass.UUID.Builder.class);
      }

      // Construct using SmartPlugOuterClass.UUID.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        devId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SmartPlugOuterClass.internal_static_UUID_descriptor;
      }

      @java.lang.Override
      public SmartPlugOuterClass.UUID getDefaultInstanceForType() {
        return SmartPlugOuterClass.UUID.getDefaultInstance();
      }

      @java.lang.Override
      public SmartPlugOuterClass.UUID build() {
        SmartPlugOuterClass.UUID result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public SmartPlugOuterClass.UUID buildPartial() {
        SmartPlugOuterClass.UUID result = new SmartPlugOuterClass.UUID(this);
        result.devId_ = devId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SmartPlugOuterClass.UUID) {
          return mergeFrom((SmartPlugOuterClass.UUID)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SmartPlugOuterClass.UUID other) {
        if (other == SmartPlugOuterClass.UUID.getDefaultInstance()) return this;
        if (!other.getDevId().isEmpty()) {
          devId_ = other.devId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SmartPlugOuterClass.UUID parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SmartPlugOuterClass.UUID) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object devId_ = "";
      /**
       * <code>string devId = 1;</code>
       * @return The devId.
       */
      public java.lang.String getDevId() {
        java.lang.Object ref = devId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          devId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string devId = 1;</code>
       * @return The bytes for devId.
       */
      public com.google.protobuf.ByteString
          getDevIdBytes() {
        java.lang.Object ref = devId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          devId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string devId = 1;</code>
       * @param value The devId to set.
       * @return This builder for chaining.
       */
      public Builder setDevId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        devId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string devId = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDevId() {
        
        devId_ = getDefaultInstance().getDevId();
        onChanged();
        return this;
      }
      /**
       * <code>string devId = 1;</code>
       * @param value The bytes for devId to set.
       * @return This builder for chaining.
       */
      public Builder setDevIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        devId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:UUID)
    }

    // @@protoc_insertion_point(class_scope:UUID)
    private static final SmartPlugOuterClass.UUID DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SmartPlugOuterClass.UUID();
    }

    public static SmartPlugOuterClass.UUID getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UUID>
        PARSER = new com.google.protobuf.AbstractParser<UUID>() {
      @java.lang.Override
      public UUID parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UUID(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UUID> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UUID> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public SmartPlugOuterClass.UUID getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SmartPlugOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SmartPlug)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The "timestamp" is a monotonically increasing UTC millisecond timestamp:
     * </pre>
     *
     * <code>uint64 timestamp = 1;</code>
     * @return The timestamp.
     */
    long getTimestamp();

    /**
     * <pre>
     * We treat the "version" field as OPTIONAL and the data generator will
     * normally only populate this field at the start-of-day. As such it can be
     * used by the backend as an indication that a client device has been rebooted
     * (for whatever reason). It allows the backend to track device restarts
     * without explicitly having to add a new field to provide that
     * information. After start-of-day all subsequent messages transmitted should
     * NOT fill the "version" field, thus minimising the size of the transmitted
     * binary and still allowing the backend to be notified of changes in
     * "version" if a client device is upgraded in the field (and hence will
     * restart and transmit the new "version" value in its first upload). There is
     * no point in continually transmitting a piece of "static" information for a
     * specific firmware build.
     * </pre>
     *
     * <code>.SchemaVersion version = 2;</code>
     * @return The enum numeric value on the wire for version.
     */
    int getVersionValue();
    /**
     * <pre>
     * We treat the "version" field as OPTIONAL and the data generator will
     * normally only populate this field at the start-of-day. As such it can be
     * used by the backend as an indication that a client device has been rebooted
     * (for whatever reason). It allows the backend to track device restarts
     * without explicitly having to add a new field to provide that
     * information. After start-of-day all subsequent messages transmitted should
     * NOT fill the "version" field, thus minimising the size of the transmitted
     * binary and still allowing the backend to be notified of changes in
     * "version" if a client device is upgraded in the field (and hence will
     * restart and transmit the new "version" value in its first upload). There is
     * no point in continually transmitting a piece of "static" information for a
     * specific firmware build.
     * </pre>
     *
     * <code>.SchemaVersion version = 2;</code>
     * @return The version.
     */
    SmartPlugOuterClass.SchemaVersion getVersion();

    /**
     * <pre>
     * We provide support for an optional unique identifier to be carried in the
     * data so we can uniquely identify the source device. This can be a
     * per-device H/W specific value or something programmed into the flash of a
     * device during onboarding. It is *NOT* strictly necessary when using a
     * point-to-point system like Pelion where the connection already defines the
     * identity of the device. The field is just provided here as an option if we
     * want/need it.
     * </pre>
     *
     * <code>.UUID identity = 3;</code>
     * @return Whether the identity field is set.
     */
    boolean hasIdentity();
    /**
     * <pre>
     * We provide support for an optional unique identifier to be carried in the
     * data so we can uniquely identify the source device. This can be a
     * per-device H/W specific value or something programmed into the flash of a
     * device during onboarding. It is *NOT* strictly necessary when using a
     * point-to-point system like Pelion where the connection already defines the
     * identity of the device. The field is just provided here as an option if we
     * want/need it.
     * </pre>
     *
     * <code>.UUID identity = 3;</code>
     * @return The identity.
     */
    SmartPlugOuterClass.UUID getIdentity();
    /**
     * <pre>
     * We provide support for an optional unique identifier to be carried in the
     * data so we can uniquely identify the source device. This can be a
     * per-device H/W specific value or something programmed into the flash of a
     * device during onboarding. It is *NOT* strictly necessary when using a
     * point-to-point system like Pelion where the connection already defines the
     * identity of the device. The field is just provided here as an option if we
     * want/need it.
     * </pre>
     *
     * <code>.UUID identity = 3;</code>
     */
    SmartPlugOuterClass.UUIDOrBuilder getIdentityOrBuilder();

    /**
     * <pre>
     * We have a "vector" of fields to work around the receiver discerning
     * provided data against default values:
     * </pre>
     *
     * <code>repeated .Field fields = 4;</code>
     */
    java.util.List<SmartPlugOuterClass.Field> 
        getFieldsList();
    /**
     * <pre>
     * We have a "vector" of fields to work around the receiver discerning
     * provided data against default values:
     * </pre>
     *
     * <code>repeated .Field fields = 4;</code>
     */
    SmartPlugOuterClass.Field getFields(int index);
    /**
     * <pre>
     * We have a "vector" of fields to work around the receiver discerning
     * provided data against default values:
     * </pre>
     *
     * <code>repeated .Field fields = 4;</code>
     */
    int getFieldsCount();
    /**
     * <pre>
     * We have a "vector" of fields to work around the receiver discerning
     * provided data against default values:
     * </pre>
     *
     * <code>repeated .Field fields = 4;</code>
     */
    java.util.List<? extends SmartPlugOuterClass.FieldOrBuilder> 
        getFieldsOrBuilderList();
    /**
     * <pre>
     * We have a "vector" of fields to work around the receiver discerning
     * provided data against default values:
     * </pre>
     *
     * <code>repeated .Field fields = 4;</code>
     */
    SmartPlugOuterClass.FieldOrBuilder getFieldsOrBuilder(
        int index);

    /**
     * <pre>
     * A monotonically increasing sequence number. The default value of 0
     * indicates no sequence#, with valid sequences starting from 1. This optional
     * field is provided since it may be possible for a device that has not been
     * able to obtain network time to have an "uninitialised" timestamp field;
     * which would be indicated by timestamps being reported as the epoch or
     * shortly thereafter. To allow the backend data processing to correctly
     * interleave messages received with an invalid timestamp we provide the
     * ability for the firmware to provide a sequence number identifying the
     * message order. The use of a 64-bit numberspace obviates the requirement to
     * cope with the sequence# overflowing.
     * </pre>
     *
     * <code>uint64 sequence = 5;</code>
     * @return The sequence.
     */
    long getSequence();
  }
  /**
   * <pre>
   * Top-level message:
   * </pre>
   *
   * Protobuf type {@code SmartPlug}
   */
  public  static final class SmartPlug extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SmartPlug)
      SmartPlugOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SmartPlug.newBuilder() to construct.
    private SmartPlug(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SmartPlug() {
      version_ = 0;
      fields_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SmartPlug();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SmartPlug(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              timestamp_ = input.readUInt64();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              version_ = rawValue;
              break;
            }
            case 26: {
              SmartPlugOuterClass.UUID.Builder subBuilder = null;
              if (identity_ != null) {
                subBuilder = identity_.toBuilder();
              }
              identity_ = input.readMessage(SmartPlugOuterClass.UUID.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(identity_);
                identity_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                fields_ = new java.util.ArrayList<SmartPlugOuterClass.Field>();
                mutable_bitField0_ |= 0x00000001;
              }
              fields_.add(
                  input.readMessage(SmartPlugOuterClass.Field.parser(), extensionRegistry));
              break;
            }
            case 40: {

              sequence_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          fields_ = java.util.Collections.unmodifiableList(fields_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SmartPlugOuterClass.internal_static_SmartPlug_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SmartPlugOuterClass.internal_static_SmartPlug_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SmartPlugOuterClass.SmartPlug.class, SmartPlugOuterClass.SmartPlug.Builder.class);
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private long timestamp_;
    /**
     * <pre>
     * The "timestamp" is a monotonically increasing UTC millisecond timestamp:
     * </pre>
     *
     * <code>uint64 timestamp = 1;</code>
     * @return The timestamp.
     */
    public long getTimestamp() {
      return timestamp_;
    }

    public static final int VERSION_FIELD_NUMBER = 2;
    private int version_;
    /**
     * <pre>
     * We treat the "version" field as OPTIONAL and the data generator will
     * normally only populate this field at the start-of-day. As such it can be
     * used by the backend as an indication that a client device has been rebooted
     * (for whatever reason). It allows the backend to track device restarts
     * without explicitly having to add a new field to provide that
     * information. After start-of-day all subsequent messages transmitted should
     * NOT fill the "version" field, thus minimising the size of the transmitted
     * binary and still allowing the backend to be notified of changes in
     * "version" if a client device is upgraded in the field (and hence will
     * restart and transmit the new "version" value in its first upload). There is
     * no point in continually transmitting a piece of "static" information for a
     * specific firmware build.
     * </pre>
     *
     * <code>.SchemaVersion version = 2;</code>
     * @return The enum numeric value on the wire for version.
     */
    public int getVersionValue() {
      return version_;
    }
    /**
     * <pre>
     * We treat the "version" field as OPTIONAL and the data generator will
     * normally only populate this field at the start-of-day. As such it can be
     * used by the backend as an indication that a client device has been rebooted
     * (for whatever reason). It allows the backend to track device restarts
     * without explicitly having to add a new field to provide that
     * information. After start-of-day all subsequent messages transmitted should
     * NOT fill the "version" field, thus minimising the size of the transmitted
     * binary and still allowing the backend to be notified of changes in
     * "version" if a client device is upgraded in the field (and hence will
     * restart and transmit the new "version" value in its first upload). There is
     * no point in continually transmitting a piece of "static" information for a
     * specific firmware build.
     * </pre>
     *
     * <code>.SchemaVersion version = 2;</code>
     * @return The version.
     */
    public SmartPlugOuterClass.SchemaVersion getVersion() {
      @SuppressWarnings("deprecation")
      SmartPlugOuterClass.SchemaVersion result = SmartPlugOuterClass.SchemaVersion.valueOf(version_);
      return result == null ? SmartPlugOuterClass.SchemaVersion.UNRECOGNIZED : result;
    }

    public static final int IDENTITY_FIELD_NUMBER = 3;
    private SmartPlugOuterClass.UUID identity_;
    /**
     * <pre>
     * We provide support for an optional unique identifier to be carried in the
     * data so we can uniquely identify the source device. This can be a
     * per-device H/W specific value or something programmed into the flash of a
     * device during onboarding. It is *NOT* strictly necessary when using a
     * point-to-point system like Pelion where the connection already defines the
     * identity of the device. The field is just provided here as an option if we
     * want/need it.
     * </pre>
     *
     * <code>.UUID identity = 3;</code>
     * @return Whether the identity field is set.
     */
    public boolean hasIdentity() {
      return identity_ != null;
    }
    /**
     * <pre>
     * We provide support for an optional unique identifier to be carried in the
     * data so we can uniquely identify the source device. This can be a
     * per-device H/W specific value or something programmed into the flash of a
     * device during onboarding. It is *NOT* strictly necessary when using a
     * point-to-point system like Pelion where the connection already defines the
     * identity of the device. The field is just provided here as an option if we
     * want/need it.
     * </pre>
     *
     * <code>.UUID identity = 3;</code>
     * @return The identity.
     */
    public SmartPlugOuterClass.UUID getIdentity() {
      return identity_ == null ? SmartPlugOuterClass.UUID.getDefaultInstance() : identity_;
    }
    /**
     * <pre>
     * We provide support for an optional unique identifier to be carried in the
     * data so we can uniquely identify the source device. This can be a
     * per-device H/W specific value or something programmed into the flash of a
     * device during onboarding. It is *NOT* strictly necessary when using a
     * point-to-point system like Pelion where the connection already defines the
     * identity of the device. The field is just provided here as an option if we
     * want/need it.
     * </pre>
     *
     * <code>.UUID identity = 3;</code>
     */
    public SmartPlugOuterClass.UUIDOrBuilder getIdentityOrBuilder() {
      return getIdentity();
    }

    public static final int FIELDS_FIELD_NUMBER = 4;
    private java.util.List<SmartPlugOuterClass.Field> fields_;
    /**
     * <pre>
     * We have a "vector" of fields to work around the receiver discerning
     * provided data against default values:
     * </pre>
     *
     * <code>repeated .Field fields = 4;</code>
     */
    public java.util.List<SmartPlugOuterClass.Field> getFieldsList() {
      return fields_;
    }
    /**
     * <pre>
     * We have a "vector" of fields to work around the receiver discerning
     * provided data against default values:
     * </pre>
     *
     * <code>repeated .Field fields = 4;</code>
     */
    public java.util.List<? extends SmartPlugOuterClass.FieldOrBuilder> 
        getFieldsOrBuilderList() {
      return fields_;
    }
    /**
     * <pre>
     * We have a "vector" of fields to work around the receiver discerning
     * provided data against default values:
     * </pre>
     *
     * <code>repeated .Field fields = 4;</code>
     */
    public int getFieldsCount() {
      return fields_.size();
    }
    /**
     * <pre>
     * We have a "vector" of fields to work around the receiver discerning
     * provided data against default values:
     * </pre>
     *
     * <code>repeated .Field fields = 4;</code>
     */
    public SmartPlugOuterClass.Field getFields(int index) {
      return fields_.get(index);
    }
    /**
     * <pre>
     * We have a "vector" of fields to work around the receiver discerning
     * provided data against default values:
     * </pre>
     *
     * <code>repeated .Field fields = 4;</code>
     */
    public SmartPlugOuterClass.FieldOrBuilder getFieldsOrBuilder(
        int index) {
      return fields_.get(index);
    }

    public static final int SEQUENCE_FIELD_NUMBER = 5;
    private long sequence_;
    /**
     * <pre>
     * A monotonically increasing sequence number. The default value of 0
     * indicates no sequence#, with valid sequences starting from 1. This optional
     * field is provided since it may be possible for a device that has not been
     * able to obtain network time to have an "uninitialised" timestamp field;
     * which would be indicated by timestamps being reported as the epoch or
     * shortly thereafter. To allow the backend data processing to correctly
     * interleave messages received with an invalid timestamp we provide the
     * ability for the firmware to provide a sequence number identifying the
     * message order. The use of a 64-bit numberspace obviates the requirement to
     * cope with the sequence# overflowing.
     * </pre>
     *
     * <code>uint64 sequence = 5;</code>
     * @return The sequence.
     */
    public long getSequence() {
      return sequence_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (timestamp_ != 0L) {
        output.writeUInt64(1, timestamp_);
      }
      if (version_ != SmartPlugOuterClass.SchemaVersion.INVALID.getNumber()) {
        output.writeEnum(2, version_);
      }
      if (identity_ != null) {
        output.writeMessage(3, getIdentity());
      }
      for (int i = 0; i < fields_.size(); i++) {
        output.writeMessage(4, fields_.get(i));
      }
      if (sequence_ != 0L) {
        output.writeUInt64(5, sequence_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, timestamp_);
      }
      if (version_ != SmartPlugOuterClass.SchemaVersion.INVALID.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, version_);
      }
      if (identity_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getIdentity());
      }
      for (int i = 0; i < fields_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, fields_.get(i));
      }
      if (sequence_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, sequence_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SmartPlugOuterClass.SmartPlug)) {
        return super.equals(obj);
      }
      SmartPlugOuterClass.SmartPlug other = (SmartPlugOuterClass.SmartPlug) obj;

      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (version_ != other.version_) return false;
      if (hasIdentity() != other.hasIdentity()) return false;
      if (hasIdentity()) {
        if (!getIdentity()
            .equals(other.getIdentity())) return false;
      }
      if (!getFieldsList()
          .equals(other.getFieldsList())) return false;
      if (getSequence()
          != other.getSequence()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + version_;
      if (hasIdentity()) {
        hash = (37 * hash) + IDENTITY_FIELD_NUMBER;
        hash = (53 * hash) + getIdentity().hashCode();
      }
      if (getFieldsCount() > 0) {
        hash = (37 * hash) + FIELDS_FIELD_NUMBER;
        hash = (53 * hash) + getFieldsList().hashCode();
      }
      hash = (37 * hash) + SEQUENCE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSequence());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SmartPlugOuterClass.SmartPlug parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SmartPlugOuterClass.SmartPlug parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SmartPlugOuterClass.SmartPlug parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SmartPlugOuterClass.SmartPlug parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SmartPlugOuterClass.SmartPlug parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SmartPlugOuterClass.SmartPlug parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SmartPlugOuterClass.SmartPlug parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SmartPlugOuterClass.SmartPlug parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SmartPlugOuterClass.SmartPlug parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SmartPlugOuterClass.SmartPlug parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SmartPlugOuterClass.SmartPlug parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SmartPlugOuterClass.SmartPlug parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SmartPlugOuterClass.SmartPlug prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Top-level message:
     * </pre>
     *
     * Protobuf type {@code SmartPlug}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SmartPlug)
        SmartPlugOuterClass.SmartPlugOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SmartPlugOuterClass.internal_static_SmartPlug_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SmartPlugOuterClass.internal_static_SmartPlug_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SmartPlugOuterClass.SmartPlug.class, SmartPlugOuterClass.SmartPlug.Builder.class);
      }

      // Construct using SmartPlugOuterClass.SmartPlug.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFieldsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        timestamp_ = 0L;

        version_ = 0;

        if (identityBuilder_ == null) {
          identity_ = null;
        } else {
          identity_ = null;
          identityBuilder_ = null;
        }
        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          fieldsBuilder_.clear();
        }
        sequence_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SmartPlugOuterClass.internal_static_SmartPlug_descriptor;
      }

      @java.lang.Override
      public SmartPlugOuterClass.SmartPlug getDefaultInstanceForType() {
        return SmartPlugOuterClass.SmartPlug.getDefaultInstance();
      }

      @java.lang.Override
      public SmartPlugOuterClass.SmartPlug build() {
        SmartPlugOuterClass.SmartPlug result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public SmartPlugOuterClass.SmartPlug buildPartial() {
        SmartPlugOuterClass.SmartPlug result = new SmartPlugOuterClass.SmartPlug(this);
        int from_bitField0_ = bitField0_;
        result.timestamp_ = timestamp_;
        result.version_ = version_;
        if (identityBuilder_ == null) {
          result.identity_ = identity_;
        } else {
          result.identity_ = identityBuilder_.build();
        }
        if (fieldsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            fields_ = java.util.Collections.unmodifiableList(fields_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.fields_ = fields_;
        } else {
          result.fields_ = fieldsBuilder_.build();
        }
        result.sequence_ = sequence_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SmartPlugOuterClass.SmartPlug) {
          return mergeFrom((SmartPlugOuterClass.SmartPlug)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SmartPlugOuterClass.SmartPlug other) {
        if (other == SmartPlugOuterClass.SmartPlug.getDefaultInstance()) return this;
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        if (other.version_ != 0) {
          setVersionValue(other.getVersionValue());
        }
        if (other.hasIdentity()) {
          mergeIdentity(other.getIdentity());
        }
        if (fieldsBuilder_ == null) {
          if (!other.fields_.isEmpty()) {
            if (fields_.isEmpty()) {
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFieldsIsMutable();
              fields_.addAll(other.fields_);
            }
            onChanged();
          }
        } else {
          if (!other.fields_.isEmpty()) {
            if (fieldsBuilder_.isEmpty()) {
              fieldsBuilder_.dispose();
              fieldsBuilder_ = null;
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000001);
              fieldsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFieldsFieldBuilder() : null;
            } else {
              fieldsBuilder_.addAllMessages(other.fields_);
            }
          }
        }
        if (other.getSequence() != 0L) {
          setSequence(other.getSequence());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SmartPlugOuterClass.SmartPlug parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SmartPlugOuterClass.SmartPlug) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long timestamp_ ;
      /**
       * <pre>
       * The "timestamp" is a monotonically increasing UTC millisecond timestamp:
       * </pre>
       *
       * <code>uint64 timestamp = 1;</code>
       * @return The timestamp.
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * The "timestamp" is a monotonically increasing UTC millisecond timestamp:
       * </pre>
       *
       * <code>uint64 timestamp = 1;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The "timestamp" is a monotonically increasing UTC millisecond timestamp:
       * </pre>
       *
       * <code>uint64 timestamp = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      private int version_ = 0;
      /**
       * <pre>
       * We treat the "version" field as OPTIONAL and the data generator will
       * normally only populate this field at the start-of-day. As such it can be
       * used by the backend as an indication that a client device has been rebooted
       * (for whatever reason). It allows the backend to track device restarts
       * without explicitly having to add a new field to provide that
       * information. After start-of-day all subsequent messages transmitted should
       * NOT fill the "version" field, thus minimising the size of the transmitted
       * binary and still allowing the backend to be notified of changes in
       * "version" if a client device is upgraded in the field (and hence will
       * restart and transmit the new "version" value in its first upload). There is
       * no point in continually transmitting a piece of "static" information for a
       * specific firmware build.
       * </pre>
       *
       * <code>.SchemaVersion version = 2;</code>
       * @return The enum numeric value on the wire for version.
       */
      public int getVersionValue() {
        return version_;
      }
      /**
       * <pre>
       * We treat the "version" field as OPTIONAL and the data generator will
       * normally only populate this field at the start-of-day. As such it can be
       * used by the backend as an indication that a client device has been rebooted
       * (for whatever reason). It allows the backend to track device restarts
       * without explicitly having to add a new field to provide that
       * information. After start-of-day all subsequent messages transmitted should
       * NOT fill the "version" field, thus minimising the size of the transmitted
       * binary and still allowing the backend to be notified of changes in
       * "version" if a client device is upgraded in the field (and hence will
       * restart and transmit the new "version" value in its first upload). There is
       * no point in continually transmitting a piece of "static" information for a
       * specific firmware build.
       * </pre>
       *
       * <code>.SchemaVersion version = 2;</code>
       * @param value The enum numeric value on the wire for version to set.
       * @return This builder for chaining.
       */
      public Builder setVersionValue(int value) {
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * We treat the "version" field as OPTIONAL and the data generator will
       * normally only populate this field at the start-of-day. As such it can be
       * used by the backend as an indication that a client device has been rebooted
       * (for whatever reason). It allows the backend to track device restarts
       * without explicitly having to add a new field to provide that
       * information. After start-of-day all subsequent messages transmitted should
       * NOT fill the "version" field, thus minimising the size of the transmitted
       * binary and still allowing the backend to be notified of changes in
       * "version" if a client device is upgraded in the field (and hence will
       * restart and transmit the new "version" value in its first upload). There is
       * no point in continually transmitting a piece of "static" information for a
       * specific firmware build.
       * </pre>
       *
       * <code>.SchemaVersion version = 2;</code>
       * @return The version.
       */
      public SmartPlugOuterClass.SchemaVersion getVersion() {
        @SuppressWarnings("deprecation")
        SmartPlugOuterClass.SchemaVersion result = SmartPlugOuterClass.SchemaVersion.valueOf(version_);
        return result == null ? SmartPlugOuterClass.SchemaVersion.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * We treat the "version" field as OPTIONAL and the data generator will
       * normally only populate this field at the start-of-day. As such it can be
       * used by the backend as an indication that a client device has been rebooted
       * (for whatever reason). It allows the backend to track device restarts
       * without explicitly having to add a new field to provide that
       * information. After start-of-day all subsequent messages transmitted should
       * NOT fill the "version" field, thus minimising the size of the transmitted
       * binary and still allowing the backend to be notified of changes in
       * "version" if a client device is upgraded in the field (and hence will
       * restart and transmit the new "version" value in its first upload). There is
       * no point in continually transmitting a piece of "static" information for a
       * specific firmware build.
       * </pre>
       *
       * <code>.SchemaVersion version = 2;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(SmartPlugOuterClass.SchemaVersion value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        version_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * We treat the "version" field as OPTIONAL and the data generator will
       * normally only populate this field at the start-of-day. As such it can be
       * used by the backend as an indication that a client device has been rebooted
       * (for whatever reason). It allows the backend to track device restarts
       * without explicitly having to add a new field to provide that
       * information. After start-of-day all subsequent messages transmitted should
       * NOT fill the "version" field, thus minimising the size of the transmitted
       * binary and still allowing the backend to be notified of changes in
       * "version" if a client device is upgraded in the field (and hence will
       * restart and transmit the new "version" value in its first upload). There is
       * no point in continually transmitting a piece of "static" information for a
       * specific firmware build.
       * </pre>
       *
       * <code>.SchemaVersion version = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        
        version_ = 0;
        onChanged();
        return this;
      }

      private SmartPlugOuterClass.UUID identity_;
      private com.google.protobuf.SingleFieldBuilderV3<
          SmartPlugOuterClass.UUID, SmartPlugOuterClass.UUID.Builder, SmartPlugOuterClass.UUIDOrBuilder> identityBuilder_;
      /**
       * <pre>
       * We provide support for an optional unique identifier to be carried in the
       * data so we can uniquely identify the source device. This can be a
       * per-device H/W specific value or something programmed into the flash of a
       * device during onboarding. It is *NOT* strictly necessary when using a
       * point-to-point system like Pelion where the connection already defines the
       * identity of the device. The field is just provided here as an option if we
       * want/need it.
       * </pre>
       *
       * <code>.UUID identity = 3;</code>
       * @return Whether the identity field is set.
       */
      public boolean hasIdentity() {
        return identityBuilder_ != null || identity_ != null;
      }
      /**
       * <pre>
       * We provide support for an optional unique identifier to be carried in the
       * data so we can uniquely identify the source device. This can be a
       * per-device H/W specific value or something programmed into the flash of a
       * device during onboarding. It is *NOT* strictly necessary when using a
       * point-to-point system like Pelion where the connection already defines the
       * identity of the device. The field is just provided here as an option if we
       * want/need it.
       * </pre>
       *
       * <code>.UUID identity = 3;</code>
       * @return The identity.
       */
      public SmartPlugOuterClass.UUID getIdentity() {
        if (identityBuilder_ == null) {
          return identity_ == null ? SmartPlugOuterClass.UUID.getDefaultInstance() : identity_;
        } else {
          return identityBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * We provide support for an optional unique identifier to be carried in the
       * data so we can uniquely identify the source device. This can be a
       * per-device H/W specific value or something programmed into the flash of a
       * device during onboarding. It is *NOT* strictly necessary when using a
       * point-to-point system like Pelion where the connection already defines the
       * identity of the device. The field is just provided here as an option if we
       * want/need it.
       * </pre>
       *
       * <code>.UUID identity = 3;</code>
       */
      public Builder setIdentity(SmartPlugOuterClass.UUID value) {
        if (identityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          identity_ = value;
          onChanged();
        } else {
          identityBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * We provide support for an optional unique identifier to be carried in the
       * data so we can uniquely identify the source device. This can be a
       * per-device H/W specific value or something programmed into the flash of a
       * device during onboarding. It is *NOT* strictly necessary when using a
       * point-to-point system like Pelion where the connection already defines the
       * identity of the device. The field is just provided here as an option if we
       * want/need it.
       * </pre>
       *
       * <code>.UUID identity = 3;</code>
       */
      public Builder setIdentity(
          SmartPlugOuterClass.UUID.Builder builderForValue) {
        if (identityBuilder_ == null) {
          identity_ = builderForValue.build();
          onChanged();
        } else {
          identityBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * We provide support for an optional unique identifier to be carried in the
       * data so we can uniquely identify the source device. This can be a
       * per-device H/W specific value or something programmed into the flash of a
       * device during onboarding. It is *NOT* strictly necessary when using a
       * point-to-point system like Pelion where the connection already defines the
       * identity of the device. The field is just provided here as an option if we
       * want/need it.
       * </pre>
       *
       * <code>.UUID identity = 3;</code>
       */
      public Builder mergeIdentity(SmartPlugOuterClass.UUID value) {
        if (identityBuilder_ == null) {
          if (identity_ != null) {
            identity_ =
              SmartPlugOuterClass.UUID.newBuilder(identity_).mergeFrom(value).buildPartial();
          } else {
            identity_ = value;
          }
          onChanged();
        } else {
          identityBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * We provide support for an optional unique identifier to be carried in the
       * data so we can uniquely identify the source device. This can be a
       * per-device H/W specific value or something programmed into the flash of a
       * device during onboarding. It is *NOT* strictly necessary when using a
       * point-to-point system like Pelion where the connection already defines the
       * identity of the device. The field is just provided here as an option if we
       * want/need it.
       * </pre>
       *
       * <code>.UUID identity = 3;</code>
       */
      public Builder clearIdentity() {
        if (identityBuilder_ == null) {
          identity_ = null;
          onChanged();
        } else {
          identity_ = null;
          identityBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * We provide support for an optional unique identifier to be carried in the
       * data so we can uniquely identify the source device. This can be a
       * per-device H/W specific value or something programmed into the flash of a
       * device during onboarding. It is *NOT* strictly necessary when using a
       * point-to-point system like Pelion where the connection already defines the
       * identity of the device. The field is just provided here as an option if we
       * want/need it.
       * </pre>
       *
       * <code>.UUID identity = 3;</code>
       */
      public SmartPlugOuterClass.UUID.Builder getIdentityBuilder() {
        
        onChanged();
        return getIdentityFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * We provide support for an optional unique identifier to be carried in the
       * data so we can uniquely identify the source device. This can be a
       * per-device H/W specific value or something programmed into the flash of a
       * device during onboarding. It is *NOT* strictly necessary when using a
       * point-to-point system like Pelion where the connection already defines the
       * identity of the device. The field is just provided here as an option if we
       * want/need it.
       * </pre>
       *
       * <code>.UUID identity = 3;</code>
       */
      public SmartPlugOuterClass.UUIDOrBuilder getIdentityOrBuilder() {
        if (identityBuilder_ != null) {
          return identityBuilder_.getMessageOrBuilder();
        } else {
          return identity_ == null ?
              SmartPlugOuterClass.UUID.getDefaultInstance() : identity_;
        }
      }
      /**
       * <pre>
       * We provide support for an optional unique identifier to be carried in the
       * data so we can uniquely identify the source device. This can be a
       * per-device H/W specific value or something programmed into the flash of a
       * device during onboarding. It is *NOT* strictly necessary when using a
       * point-to-point system like Pelion where the connection already defines the
       * identity of the device. The field is just provided here as an option if we
       * want/need it.
       * </pre>
       *
       * <code>.UUID identity = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SmartPlugOuterClass.UUID, SmartPlugOuterClass.UUID.Builder, SmartPlugOuterClass.UUIDOrBuilder> 
          getIdentityFieldBuilder() {
        if (identityBuilder_ == null) {
          identityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SmartPlugOuterClass.UUID, SmartPlugOuterClass.UUID.Builder, SmartPlugOuterClass.UUIDOrBuilder>(
                  getIdentity(),
                  getParentForChildren(),
                  isClean());
          identity_ = null;
        }
        return identityBuilder_;
      }

      private java.util.List<SmartPlugOuterClass.Field> fields_ =
        java.util.Collections.emptyList();
      private void ensureFieldsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          fields_ = new java.util.ArrayList<SmartPlugOuterClass.Field>(fields_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          SmartPlugOuterClass.Field, SmartPlugOuterClass.Field.Builder, SmartPlugOuterClass.FieldOrBuilder> fieldsBuilder_;

      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public java.util.List<SmartPlugOuterClass.Field> getFieldsList() {
        if (fieldsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(fields_);
        } else {
          return fieldsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public int getFieldsCount() {
        if (fieldsBuilder_ == null) {
          return fields_.size();
        } else {
          return fieldsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public SmartPlugOuterClass.Field getFields(int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);
        } else {
          return fieldsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public Builder setFields(
          int index, SmartPlugOuterClass.Field value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.set(index, value);
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public Builder setFields(
          int index, SmartPlugOuterClass.Field.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.set(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public Builder addFields(SmartPlugOuterClass.Field value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public Builder addFields(
          int index, SmartPlugOuterClass.Field value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(index, value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public Builder addFields(
          SmartPlugOuterClass.Field.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public Builder addFields(
          int index, SmartPlugOuterClass.Field.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public Builder addAllFields(
          java.lang.Iterable<? extends SmartPlugOuterClass.Field> values) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, fields_);
          onChanged();
        } else {
          fieldsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public Builder clearFields() {
        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          fieldsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public Builder removeFields(int index) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.remove(index);
          onChanged();
        } else {
          fieldsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public SmartPlugOuterClass.Field.Builder getFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public SmartPlugOuterClass.FieldOrBuilder getFieldsOrBuilder(
          int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);  } else {
          return fieldsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public java.util.List<? extends SmartPlugOuterClass.FieldOrBuilder> 
           getFieldsOrBuilderList() {
        if (fieldsBuilder_ != null) {
          return fieldsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(fields_);
        }
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public SmartPlugOuterClass.Field.Builder addFieldsBuilder() {
        return getFieldsFieldBuilder().addBuilder(
            SmartPlugOuterClass.Field.getDefaultInstance());
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public SmartPlugOuterClass.Field.Builder addFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().addBuilder(
            index, SmartPlugOuterClass.Field.getDefaultInstance());
      }
      /**
       * <pre>
       * We have a "vector" of fields to work around the receiver discerning
       * provided data against default values:
       * </pre>
       *
       * <code>repeated .Field fields = 4;</code>
       */
      public java.util.List<SmartPlugOuterClass.Field.Builder> 
           getFieldsBuilderList() {
        return getFieldsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          SmartPlugOuterClass.Field, SmartPlugOuterClass.Field.Builder, SmartPlugOuterClass.FieldOrBuilder> 
          getFieldsFieldBuilder() {
        if (fieldsBuilder_ == null) {
          fieldsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              SmartPlugOuterClass.Field, SmartPlugOuterClass.Field.Builder, SmartPlugOuterClass.FieldOrBuilder>(
                  fields_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          fields_ = null;
        }
        return fieldsBuilder_;
      }

      private long sequence_ ;
      /**
       * <pre>
       * A monotonically increasing sequence number. The default value of 0
       * indicates no sequence#, with valid sequences starting from 1. This optional
       * field is provided since it may be possible for a device that has not been
       * able to obtain network time to have an "uninitialised" timestamp field;
       * which would be indicated by timestamps being reported as the epoch or
       * shortly thereafter. To allow the backend data processing to correctly
       * interleave messages received with an invalid timestamp we provide the
       * ability for the firmware to provide a sequence number identifying the
       * message order. The use of a 64-bit numberspace obviates the requirement to
       * cope with the sequence# overflowing.
       * </pre>
       *
       * <code>uint64 sequence = 5;</code>
       * @return The sequence.
       */
      public long getSequence() {
        return sequence_;
      }
      /**
       * <pre>
       * A monotonically increasing sequence number. The default value of 0
       * indicates no sequence#, with valid sequences starting from 1. This optional
       * field is provided since it may be possible for a device that has not been
       * able to obtain network time to have an "uninitialised" timestamp field;
       * which would be indicated by timestamps being reported as the epoch or
       * shortly thereafter. To allow the backend data processing to correctly
       * interleave messages received with an invalid timestamp we provide the
       * ability for the firmware to provide a sequence number identifying the
       * message order. The use of a 64-bit numberspace obviates the requirement to
       * cope with the sequence# overflowing.
       * </pre>
       *
       * <code>uint64 sequence = 5;</code>
       * @param value The sequence to set.
       * @return This builder for chaining.
       */
      public Builder setSequence(long value) {
        
        sequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A monotonically increasing sequence number. The default value of 0
       * indicates no sequence#, with valid sequences starting from 1. This optional
       * field is provided since it may be possible for a device that has not been
       * able to obtain network time to have an "uninitialised" timestamp field;
       * which would be indicated by timestamps being reported as the epoch or
       * shortly thereafter. To allow the backend data processing to correctly
       * interleave messages received with an invalid timestamp we provide the
       * ability for the firmware to provide a sequence number identifying the
       * message order. The use of a 64-bit numberspace obviates the requirement to
       * cope with the sequence# overflowing.
       * </pre>
       *
       * <code>uint64 sequence = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearSequence() {
        
        sequence_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SmartPlug)
    }

    // @@protoc_insertion_point(class_scope:SmartPlug)
    private static final SmartPlugOuterClass.SmartPlug DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SmartPlugOuterClass.SmartPlug();
    }

    public static SmartPlugOuterClass.SmartPlug getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SmartPlug>
        PARSER = new com.google.protobuf.AbstractParser<SmartPlug>() {
      @java.lang.Override
      public SmartPlug parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SmartPlug(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SmartPlug> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SmartPlug> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public SmartPlugOuterClass.SmartPlug getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Power_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Power_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Field_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Field_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_UUID_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_UUID_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SmartPlug_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SmartPlug_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020smart_plug.proto\"K\n\005Power\022\017\n\007voltage\030\001" +
      " \001(\r\022\017\n\007current\030\002 \001(\r\022\r\n\005power\030\003 \001(\r\022\021\n\t" +
      "timestamp\030\004 \001(\004\"\357\002\n\005Field\022\026\n\003key\030\001 \001(\0162\t" +
      ".FieldKey\022\020\n\006v_bool\030\002 \001(\010H\000\022\021\n\007v_int32\030\003" +
      " \001(\005H\000\022\022\n\010v_uint32\030\004 \001(\rH\000\022\022\n\010v_sint32\030\005" +
      " \001(\021H\000\022\023\n\tv_fixed32\030\006 \001(\007H\000\022\024\n\nv_sfixed3" +
      "2\030\007 \001(\017H\000\022\021\n\007v_int64\030\010 \001(\003H\000\022\022\n\010v_uint64" +
      "\030\t \001(\004H\000\022\022\n\010v_sint64\030\n \001(\022H\000\022\023\n\tv_fixed6" +
      "4\030\013 \001(\006H\000\022\024\n\nv_sfixed64\030\014 \001(\020H\000\022\022\n\010v_dou" +
      "ble\030\r \001(\001H\000\022\021\n\007v_float\030\016 \001(\002H\000\022\022\n\010v_stri" +
      "ng\030\017 \001(\tH\000\022\021\n\007v_bytes\030\020 \001(\014H\000\022\031\n\007v_power" +
      "\030\021 \001(\0132\006.PowerH\000B\007\n\005value\"\025\n\004UUID\022\r\n\005dev" +
      "Id\030\001 \001(\t\"\202\001\n\tSmartPlug\022\021\n\ttimestamp\030\001 \001(" +
      "\004\022\037\n\007version\030\002 \001(\0162\016.SchemaVersion\022\027\n\010id" +
      "entity\030\003 \001(\0132\005.UUID\022\026\n\006fields\030\004 \003(\0132\006.Fi" +
      "eld\022\020\n\010sequence\030\005 \001(\004*.\n\rSchemaVersion\022\013" +
      "\n\007INVALID\020\000\022\020\n\014SMARTPLUG_V1\020\001*5\n\010FieldKe" +
      "y\022\n\n\006UNUSED\020\000\022\022\n\016FW_INFORMATION\020\001\022\t\n\005POW" +
      "ER\020\002b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_Power_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Power_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Power_descriptor,
        new java.lang.String[] { "Voltage", "Current", "Power", "Timestamp", });
    internal_static_Field_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_Field_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Field_descriptor,
        new java.lang.String[] { "Key", "VBool", "VInt32", "VUint32", "VSint32", "VFixed32", "VSfixed32", "VInt64", "VUint64", "VSint64", "VFixed64", "VSfixed64", "VDouble", "VFloat", "VString", "VBytes", "VPower", "Value", });
    internal_static_UUID_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_UUID_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_UUID_descriptor,
        new java.lang.String[] { "DevId", });
    internal_static_SmartPlug_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_SmartPlug_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SmartPlug_descriptor,
        new java.lang.String[] { "Timestamp", "Version", "Identity", "Fields", "Sequence", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
